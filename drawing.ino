enum Operation {
  oAbsMoveTo,
  oAbsLineTo,
  oAbsCurveTo,
  oEnd
};

#define c(v) static_cast<double>(v)
#define move_to(x, y) oAbsMoveTo, c(x), c(y)
#define line_to(x, y) oAbsLineTo, c(x), c(y)
#define curve_to(x0, y0, x1, y1, x2, y2) oAbsCurveTo, c(x0), c(y0), c(x1), c(y1), c(x2), c(y2)
#define end() oEnd
#define v(I, F) (I + F)

PROGMEM static double hand_program[] = {
  move_to(v(129, 0.4655), v(52, 0.422114)),
  line_to(v(140, 0.88369), v(52, 0.422114)),
  curve_to(v(143, 0.65173), v(59, 0.18261), v(145, 0.03576), v(65, 0.597017), v(145, 0.03576), v(71, 0.665353)),
  curve_to(v(145, 0.03576), v(77, 0.946745), v(143, 0.65173), v(84, 0.015146), v(140, 0.88369), v(89, 0.870574)),
  line_to(v(132, 0.10047), v(89, 0.870574)),
  line_to(v(124, 0.11572), v(96, 0.817302)),
  curve_to(v(116, 0.55686), v(100, 0.86295), v(106, 0.81548), v(103, 0.68422), v(94, 0.891554), v(105, 0.28114)),
  line_to(v(85, 0.309859), v(104, 0.40281)),
  line_to(v(58, 0.800506), v(119, 0.65368)),
  curve_to(v(54, 0.808214), v(121, 0.94264), v(51, 0.614323), v(123, 0.08713), v(49, 0.21881), v(123, 0.08712)),
  curve_to(v(47, 0.089631), v(123, 0.08713), v(45, 0.306379), v(122, 0.39512), v(43, 0.869033), v(121, 0.01107)),
  curve_to(v(42, 0.378639), v(119, 0.57385), v(41, 0.633404), v(117, 0.84381), v(41, 0.633297), v(115, 0.821)),
  curve_to(v(41, 0.633404), v(112, 0.84005), v(44, 0.082051), v(109, 0.85908), v(48, 0.979258), v(106, 0.87808)),
  line_to(v(71, 0.735789), v(93, 0.064472)),
  line_to(v(39, 0.158031), v(101, 0.60815)),
  curve_to(v(35, 0.112529), v(102, 0.67281), v(32, 0.31787), v(103, 0.20514), v(30, 0.774042), v(103, 0.20509)),
  curve_to(v(27, 0.793189), v(103, 0.20514), v(25, 0.584074), v(102, 0.56635), v(24, 0.146706), v(101, 0.28876)),
  curve_to(v(22, 0.656334), v(99, 0.958011), v(21, 0.911089), v(97, 0.988438), v(21, 0.91097), v(95, 0.380048)),
  curve_to(v(21, 0.911089), v(90, 0.908636), v(25, 0.317923), v(87, 0.688125), v(32, 0.131441), v(85, 0.718505)),
  line_to(v(65, 0.587536), v(76, 0.136811)),
  line_to(v(27, 0.420449), v(76, 0.136811)),
  curve_to(v(23, 0.268497), v(76, 0.136871), v(20, 0.154456), v(75, 0.391629), v(18, 0.078294), v(73, 0.901081)),
  curve_to(v(16, 0.002387), v(72, 0.410659), v(14, 0.96437), v(70, 0.174933), v(14, 0.964242), v(67, 0.193895)),
  curve_to(v(14, 0.96437), v(61, 0.285259), v(19, 0.648753), v(58, 0.330905), v(29, 0.017389), v(58, 0.330827)),
  line_to(v(67, 0.184484), v(59, 0.209148)),
  line_to(v(37, 0.481228), v(49, 0.228216)),
  curve_to(v(28, 0.751355), v(46, 0.300567), v(24, 0.386355), v(42, 0.707433), v(24, 0.386237), v(38, 0.448811)),
  curve_to(v(24, 0.386355), v(36, 0.000261000000002), v(24, 0.99853), v(34, 0.163768), v(26, 0.222742), v(32, 0.939333)),
  curve_to(v(27, 0.447176), v(31, 0.715122), v(29, 0.31029), v(31, 0.102958), v(31, 0.812059), v(31, 0.102851)),
  curve_to(v(34, 0.367284), v(31, 0.102958), v(37, 0.374864), v(31, 0.528811), v(40, 0.834823), v(32, 0.38041)),
  line_to(v(79, 0.321298), v(42, 0.281488)),
  curve_to(v(81, 0.131237), v(41, 0.749271), v(83, 0.925895), v(41, 0.296797), v(87, 0.705282), v(40, 0.924078)),
  curve_to(v(86, 0.747169), v(39, 0.220763), v(85, 0.735769), v(36, 0.851967), v(84, 0.671079), v(33, 0.81767)),
  curve_to(v(80, 0.998158), v(31, 0.635271), v(78, 0.25673), v(29, 0.213235), v(76, 0.44679), v(26, 0.551539)),
  curve_to(v(74, 0.58375), v(23, 0.890078), v(73, 0.652198), v(20, 0.962338), v(73, 0.652129), v(17, 0.768328)),
  curve_to(v(73, 0.652198), v(14, 0.681015), v(75, 0.541919), v(10, 0.928189), v(79, 0.321298), v(6, 0.50983)),
  line_to(v(80, 0.598858), v(4, 0.9128788)),
  line_to(v(96, 0.967587), v(22, 0.159928)),
  line_to(v(116, 0.61006), v(36, 0.85186)),
  curve_to(v(122, 0.03971), v(42, 0.654201), v(126, 0.32486), v(47, 0.844282), v(129, 0.4655), v(52, 0.422114)),
  move_to(v(127, 0.54917), v(56, 0.254793)),
  curve_to(v(121, 0.95986), v(49, 0.06861), v(116, 0.98272), v(43, 0.266364), v(112, 0.6177), v(38, 0.848055)),
  line_to(v(94, 0.652011), v(25, 0.433681)),
  line_to(v(80, 0.838401), v(10, 0.661899)),
  curve_to(v(78, 0.7092), v(13, 0.217145), v(77, 0.644567), v(15, 0.639181), v(77, 0.644503), v(17, 0.928019)),
  curve_to(v(77, 0.644566), v(20, 0.483255), v(78, 0.496273), v(22, 0.85205), v(80, 0.199622), v(25, 0.034438)),
  curve_to(v(81, 0.849862), v(27, 0.217051), v(84, 0.378364), v(29, 0.213235), v(87, 0.785131), v(31, 0.023)),
  curve_to(v(90, 0.712922), v(40, 0.391861), v(96, 0.036082), v(48, 0.270135), v(103, 0.75462), v(54, 0.657843)),
  line_to(v(101, 0.3592), v(57, 0.692047)),
  curve_to(v(96, 0.568398), v(54, 0.498231), v(92, 0.682491), v(50, 0.13324), v(89, 0.70147), v(44, 0.597063)),
  curve_to(v(85, 0.922079), v(45, 0.07624), v(82, 0.462026), v(45, 0.768251), v(79, 0.321298), v(46, 0.673097)),
  line_to(v(41, 0.713149), v(36, 0.612319)),
  curve_to(v(37, 0.880569), v(35, 0.547788), v(35, 0.085909), v(35, 0.015474), v(33, 0.32916), v(35, 0.015378)),
  curve_to(v(31, 0.732326), v(35, 0.015474), v(30, 0.561228), v(35, 0.308257), v(29, 0.815865), v(35, 0.893694)),
  curve_to(v(29, 0.017507), v(36, 0.479344), v(28, 0.618275), v(37, 0.35766), v(28, 0.618158), v(38, 0.528651)),
  curve_to(v(28, 0.618275), v(40, 0.764484), v(31, 0.359704), v(42, 0.813894), v(36, 0.842455), v(44, 0.67691)),
  line_to(v(71, 0.176857), v(56, 0.254793)),
  line_to(v(71, 0.176857), v(63, 0.121675)),
  line_to(v(31, 0.97175), v(62, 0.163504)),
  line_to(v(29, 0.416632), v(62, 0.083654)),
  curve_to(v(22, 0.443412), v(62, 0.083728), v(18, 0.956738), v(63, 0.760523), v(18, 0.956609), v(67, 0.114044)),
  curve_to(v(18, 0.956738), v(68, 0.764292), v(19, 0.568902), v(70, 0.015235), v(20, 0.793113), v(70, 0.866874)),
  curve_to(v(21, 0.96433), v(71, 0.718646), v(23, 0.774201), v(72, 0.144498), v(26, 0.222742), v(72, 0.144434)),
  line_to(v(31, 0.253126), v(72, 0.064584)),
  line_to(v(71, 0.176857), v(72, 0.064584)),
  line_to(v(72, 0.294722), v(78, 0.372534)),
  line_to(v(35, 0.644736), v(88, 0.353466)),
  curve_to(v(29, 0.097368), v(90, 0.110157), v(25, 0.823615), v(92, 0.399115), v(25, 0.823497), v(95, 0.220349)),
  curve_to(v(25, 0.823615), v(96, 0.604411), v(26, 0.249468), v(97, 0.642427), v(27, 0.101056), v(98, 0.334399)),
  curve_to(v(27, 0.899649), v(99, 0.026449), v(29, 0.150598), v(99, 0.372452), v(30, 0.853893), v(99, 0.372414)),
  curve_to(v(31, 0.971857), v(99, 0.372452), v(34, 0.234203), v(98, 0.89337), v(37, 0.64093), v(97, 0.935162)),
  line_to(v(76, 0.526636), v(87, 0.2356)),
  line_to(v(79, 0.321298), v(93, 0.064466)),
  line_to(v(51, 0.135143), v(110, 0.39136)),
  curve_to(v(47, 0.515495), v(112, 0.57388), v(45, 0.705612), v(114, 0.46361), v(45, 0.705515), v(116, 0.06053)),
  curve_to(v(45, 0.705612), v(117, 0.12518), v(45, 0.998394), v(117, 0.92365), v(46, 0.583842), v(118, 0.45596)),
  curve_to(v(47, 0.169482), v(118, 0.98829), v(48, 0.074418), v(119, 0.25444), v(49, 0.298661), v(119, 0.25442)),
  curve_to(v(50, 0.842467), v(119, 0.25444), v(53, 0.317734), v(118, 0.26967), v(56, 0.724462), v(116, 0.30007)),
  line_to(v(84, 0.112146), v(100, 0.33058)),
  line_to(v(94, 0.891554), v(101, 0.28875)),
  curve_to(v(105, 0.85731), v(99, 0.638607), v(115, 0.06637), v(96, 0.897184), v(122, 0.51877), v(93, 0.064466)),
  line_to(v(131, 0.30199), v(85, 0.718499)),
  line_to(v(138, 0.24872), v(85, 0.718499)),
  curve_to(v(140, 0.05861), v(81, 0.03417), v(140, 0.96354), v(76, 0.083633), v(140, 0.96354), v(70, 0.866872)),
  curve_to(v(140, 0.96354), v(66, 0.555178), v(140, 0.05861), v(61, 0.684489), v(138, 0.24872), v(56, 0.254786)),
  line_to(v(127, 0.54917), v(56, 0.254786)),
  end()
};

void Drawing::draw(double *program, Display &display) {
  double x = 0;
  double y = 0;
  while (true) {
    switch (static_cast<Operation>(pgm_read_float(program++))) {
      case oAbsMoveTo: {
        x = pgm_read_float(program++);
        y = pgm_read_float(program++);
        break;
      }
      case oAbsLineTo: {
        float tx = pgm_read_float(program++);
        float ty = pgm_read_float(program++);
        display.transform_line(Point(x, y), Point(tx, ty));
        x = tx;
        y = ty;
        break;
      }
      case oAbsCurveTo: {
        Point points[4] = {
          Point(x, y),
          Point(pgm_read_float(program++), pgm_read_float(program++)),
          Point(pgm_read_float(program++), pgm_read_float(program++)),
          Point(pgm_read_float(program++), pgm_read_float(program++))
        };
        x = points[3].x;
        y = points[3].y;
        display.transform_cubic_bezier(points);
        break;
      }
      case oEnd:
        return;
    }
  }
}

void Drawing::draw_hand(Display &display) {
  draw(hand_program, display);
}

