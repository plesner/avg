enum Operation {
  oAbsMoveTo,
  oAbsLineTo,
  oAbsCurveTo,
  oEnd
};

#define K0(P0)             (P0)
#define K1(P0, P1)         ((P1 - P0) * 3)
#define K2(P0, P1, P2)     ((P2 - (P1 * 2) + P0) * 3)
#define K3(P0, P1, P2, P3) (P3 - (P2 * 3) + (P1 * 3) - P0)
#define F(v) ENCODE_FIXED(static_cast<double>(v))

#ifdef PRECOMPUTED
#define curve_to(x0, y0, x1, y1, x2, y2, x3, y3) \
  oAbsCurveTo, \
  F(x1), F(y1), \
  F(x2), F(y2), \
  F(x3), F(y3), \
  F(K0(x0)), F(K0(y0)), \
  F(K1(x0, x1)), F(K1(y0, y1)), \
  F(K2(x0, x1, x2)), F(K2(y0, y1, y2)), \
  F(K3(x0, x1, x2, x3)), F(K3(y0, y1, y2, y3)), \
  F(x3), F(y3)
#else
#define curve_to(x0, y0, x1, y1, x2, y2, x3, y3) oAbsCurveTo, F(x1), F(y1), F(x2), F(y2), F(x3), F(y3)
#endif

#define move_to(x0, y0, x1, y1) oAbsMoveTo, F(x1), F(y1)
#define line_to(x0, y0, x1, y1) oAbsLineTo, F(x1), F(y1)
#define end() oEnd
#define e(V) static_cast<double>(V)

PROGMEM static int32_t hand_program[] = {
  move_to(e(0.0), e(0.0), e(129.4655), e(52.422114)),
  line_to(e(129.4655), e(52.422114), e(140.88369), e(52.422114)),
  curve_to(e(140.88369), e(52.422114), e(143.65173), e(59.18261), e(145.03576), e(65.597017), e(145.03576), e(71.665353)),
  curve_to(e(145.03576), e(71.665353), e(145.03576), e(77.946745), e(143.65173), e(84.015146), e(140.88369), e(89.870574)),
  line_to(e(140.88369), e(89.870574), e(132.10047), e(89.870574)),
  line_to(e(132.10047), e(89.870574), e(124.11572), e(96.817302)),
  curve_to(e(124.11572), e(96.817302), e(116.55686), e(100.86295), e(106.81548), e(103.68422), e(94.891554), e(105.28114)),
  line_to(e(94.891554), e(105.28114), e(85.309859), e(104.40281)),
  line_to(e(85.309859), e(104.40281), e(58.800506), e(119.65368)),
  curve_to(e(58.800506), e(119.65368), e(54.808214), e(121.94264), e(51.614323), e(123.08713), e(49.21881), e(123.08712)),
  curve_to(e(49.21881), e(123.08712), e(47.089631), e(123.08713), e(45.306379), e(122.39512), e(43.869033), e(121.01107)),
  curve_to(e(43.869033), e(121.01107), e(42.378639), e(119.57385), e(41.633404), e(117.84381), e(41.633297), e(115.821)),
  curve_to(e(41.633297), e(115.821), e(41.633404), e(112.84005), e(44.082051), e(109.85908), e(48.979258), e(106.87808)),
  line_to(e(48.979258), e(106.87808), e(71.735789), e(93.064472)),
  line_to(e(71.735789), e(93.064472), e(39.158031), e(101.60815)),
  curve_to(e(39.158031), e(101.60815), e(35.112529), e(102.67281), e(32.31787), e(103.20514), e(30.774042), e(103.20509)),
  curve_to(e(30.774042), e(103.20509), e(27.793189), e(103.20514), e(25.584074), e(102.56635), e(24.146706), e(101.28876)),
  curve_to(e(24.146706), e(101.28876), e(22.656334), e(99.958011), e(21.911089), e(97.988438), e(21.91097), e(95.380048)),
  curve_to(e(21.91097), e(95.380048), e(21.911089), e(90.908636), e(25.317923), e(87.688125), e(32.131441), e(85.718505)),
  line_to(e(32.131441), e(85.718505), e(65.587536), e(76.136811)),
  line_to(e(65.587536), e(76.136811), e(27.420449), e(76.136811)),
  curve_to(e(27.420449), e(76.136811), e(23.268497), e(76.136871), e(20.154456), e(75.391629), e(18.078294), e(73.901081)),
  curve_to(e(18.078294), e(73.901081), e(16.002387), e(72.410659), e(14.96437), e(70.174933), e(14.964242), e(67.193895)),
  curve_to(e(14.964242), e(67.193895), e(14.96437), e(61.285259), e(19.648753), e(58.330905), e(29.017389), e(58.330827)),
  line_to(e(29.017389), e(58.330827), e(67.184484), e(59.209148)),
  line_to(e(67.184484), e(59.209148), e(37.481228), e(49.228216)),
  curve_to(e(37.481228), e(49.228216), e(28.751355), e(46.300567), e(24.386355), e(42.707433), e(24.386237), e(38.448811)),
  curve_to(e(24.386237), e(38.448811), e(24.386355), e(36.000261), e(24.99853), e(34.163768), e(26.222742), e(32.939333)),
  curve_to(e(26.222742), e(32.939333), e(27.447176), e(31.715122), e(29.31029), e(31.102958), e(31.812059), e(31.102851)),
  curve_to(e(31.812059), e(31.102851), e(34.367284), e(31.102958), e(37.374864), e(31.528811), e(40.834823), e(32.38041)),
  line_to(e(40.834823), e(32.38041), e(79.321298), e(42.281488)),
  curve_to(e(79.321298), e(42.281488), e(81.131237), e(41.749271), e(83.925895), e(41.296797), e(87.705282), e(40.924078)),
  curve_to(e(87.705282), e(40.924078), e(86.747169), e(39.220763), e(85.735769), e(36.851967), e(84.671079), e(33.81767)),
  curve_to(e(84.671079), e(33.81767), e(80.998158), e(31.635271), e(78.25673), e(29.213235), e(76.44679), e(26.551539)),
  curve_to(e(76.44679), e(26.551539), e(74.58375), e(23.890078), e(73.652198), e(20.962338), e(73.652129), e(17.768328)),
  curve_to(e(73.652129), e(17.768328), e(73.652198), e(14.681015), e(75.541919), e(10.928189), e(79.321298), e(6.50983)),
  line_to(e(79.321298), e(6.50983), e(80.598858), e(4.9128788)),
  line_to(e(80.598858), e(4.9128788), e(96.967587), e(22.159928)),
  line_to(e(96.967587), e(22.159928), e(116.61006), e(36.85186)),
  curve_to(e(116.61006), e(36.85186), e(122.03971), e(42.654201), e(126.32486), e(47.844282), e(129.4655), e(52.422114)),
  move_to(e(129.4655), e(52.422114), e(127.54917), e(56.254793)),
  curve_to(e(127.54917), e(56.254793), e(121.95986), e(49.06861), e(116.98272), e(43.266364), e(112.6177), e(38.848055)),
  line_to(e(112.6177), e(38.848055), e(94.652011), e(25.433681)),
  line_to(e(94.652011), e(25.433681), e(80.838401), e(10.661899)),
  curve_to(e(80.838401), e(10.661899), e(78.7092), e(13.217145), e(77.644567), e(15.639181), e(77.644503), e(17.928019)),
  curve_to(e(77.644503), e(17.928019), e(77.644566), e(20.483255), e(78.496273), e(22.85205), e(80.199622), e(25.034438)),
  curve_to(e(80.199622), e(25.034438), e(81.849862), e(27.217051), e(84.378364), e(29.213235), e(87.785131), e(31.023)),
  curve_to(e(87.785131), e(31.023), e(90.712922), e(40.391861), e(96.036082), e(48.270135), e(103.75462), e(54.657843)),
  line_to(e(103.75462), e(54.657843), e(101.3592), e(57.692047)),
  curve_to(e(101.3592), e(57.692047), e(96.568398), e(54.498231), e(92.682491), e(50.13324), e(89.70147), e(44.597063)),
  curve_to(e(89.70147), e(44.597063), e(85.922079), e(45.07624), e(82.462026), e(45.768251), e(79.321298), e(46.673097)),
  line_to(e(79.321298), e(46.673097), e(41.713149), e(36.612319)),
  curve_to(e(41.713149), e(36.612319), e(37.880569), e(35.547788), e(35.085909), e(35.015474), e(33.32916), e(35.015378)),
  curve_to(e(33.32916), e(35.015378), e(31.732326), e(35.015474), e(30.561228), e(35.308257), e(29.815865), e(35.893694)),
  curve_to(e(29.815865), e(35.893694), e(29.017507), e(36.479344), e(28.618275), e(37.35766), e(28.618158), e(38.528651)),
  curve_to(e(28.618158), e(38.528651), e(28.618275), e(40.764484), e(31.359704), e(42.813894), e(36.842455), e(44.67691)),
  line_to(e(36.842455), e(44.67691), e(71.176857), e(56.254793)),
  line_to(e(71.176857), e(56.254793), e(71.176857), e(63.121675)),
  line_to(e(71.176857), e(63.121675), e(31.97175), e(62.163504)),
  line_to(e(31.97175), e(62.163504), e(29.416632), e(62.083654)),
  curve_to(e(29.416632), e(62.083654), e(22.443412), e(62.083728), e(18.956738), e(63.760523), e(18.956609), e(67.114044)),
  curve_to(e(18.956609), e(67.114044), e(18.956738), e(68.764292), e(19.568902), e(70.015235), e(20.793113), e(70.866874)),
  curve_to(e(20.793113), e(70.866874), e(21.96433), e(71.718646), e(23.774201), e(72.144498), e(26.222742), e(72.144434)),
  line_to(e(26.222742), e(72.144434), e(31.253126), e(72.064584)),
  line_to(e(31.253126), e(72.064584), e(71.176857), e(72.064584)),
  line_to(e(71.176857), e(72.064584), e(72.294722), e(78.372534)),
  line_to(e(72.294722), e(78.372534), e(35.644736), e(88.353466)),
  curve_to(e(35.644736), e(88.353466), e(29.097368), e(90.110157), e(25.823615), e(92.399115), e(25.823497), e(95.220349)),
  curve_to(e(25.823497), e(95.220349), e(25.823615), e(96.604411), e(26.249468), e(97.642427), e(27.101056), e(98.334399)),
  curve_to(e(27.101056), e(98.334399), e(27.899649), e(99.026449), e(29.150598), e(99.372452), e(30.853893), e(99.372414)),
  curve_to(e(30.853893), e(99.372414), e(31.971857), e(99.372452), e(34.234203), e(98.89337), e(37.64093), e(97.935162)),
  line_to(e(37.64093), e(97.935162), e(76.526636), e(87.2356)),
  line_to(e(76.526636), e(87.2356), e(79.321298), e(93.064466)),
  line_to(e(79.321298), e(93.064466), e(51.135143), e(110.39136)),
  curve_to(e(51.135143), e(110.39136), e(47.515495), e(112.57388), e(45.705612), e(114.46361), e(45.705515), e(116.06053)),
  curve_to(e(45.705515), e(116.06053), e(45.705612), e(117.12518), e(45.998394), e(117.92365), e(46.583842), e(118.45596)),
  curve_to(e(46.583842), e(118.45596), e(47.169482), e(118.98829), e(48.074418), e(119.25444), e(49.298661), e(119.25442)),
  curve_to(e(49.298661), e(119.25442), e(50.842467), e(119.25444), e(53.317734), e(118.26967), e(56.724462), e(116.30007)),
  line_to(e(56.724462), e(116.30007), e(84.112146), e(100.33058)),
  line_to(e(84.112146), e(100.33058), e(94.891554), e(101.28875)),
  curve_to(e(94.891554), e(101.28875), e(105.85731), e(99.638607), e(115.06637), e(96.897184), e(122.51877), e(93.064466)),
  line_to(e(122.51877), e(93.064466), e(131.30199), e(85.718499)),
  line_to(e(131.30199), e(85.718499), e(138.24872), e(85.718499)),
  curve_to(e(138.24872), e(85.718499), e(140.05861), e(81.03417), e(140.96354), e(76.083633), e(140.96354), e(70.866872)),
  curve_to(e(140.96354), e(70.866872), e(140.96354), e(66.555178), e(140.05861), e(61.684489), e(138.24872), e(56.254786)),
  line_to(e(138.24872), e(56.254786), e(127.54917), e(56.254786)),
  end()
};

static inline class fixed pgm_read_fixed(int32_t *mem) {
  return fixed::from_raw(pgm_read_dword(mem));
}

void Drawing::draw(int32_t *program, Display &display) {
  fixed x = 0;
  fixed y = 0;
  while (true) {
    switch (pgm_read_dword(program++)) {
      case oAbsMoveTo: {
        x = pgm_read_fixed(program++);
        y = pgm_read_fixed(program++);
        break;
      }
      case oAbsLineTo: {
        fixed tx = pgm_read_fixed(program++);
        fixed ty = pgm_read_fixed(program++);
        display.transform_line(Point<fixed>(x, y), Point<fixed>(tx, ty));
        x = tx;
        y = ty;
        break;
      }
      case oAbsCurveTo: {
        Point<fixed> points[] = {
          Point<fixed>(x, y),
          Point<fixed>(pgm_read_fixed(program++), pgm_read_fixed(program++)),
          Point<fixed>(pgm_read_fixed(program++), pgm_read_fixed(program++)),
          Point<fixed>(pgm_read_fixed(program++), pgm_read_fixed(program++))
#ifdef PRECOMPUTED
          ,
          Point<fixed>(pgm_read_fixed(program++), pgm_read_fixed(program++)),
          Point<fixed>(pgm_read_fixed(program++), pgm_read_fixed(program++)),
          Point<fixed>(pgm_read_fixed(program++), pgm_read_fixed(program++)),
          Point<fixed>(pgm_read_fixed(program++), pgm_read_fixed(program++))
        };
        x = pgm_read_fixed(program++);
        y = pgm_read_fixed(program++);
#else
        };
        x = points[3].x;
        y = points[3].y;
#endif
        display.transform_cubic_bezier(points);
        break;
      }
      case oEnd:
        return;
    }
  }
}

void Drawing::draw_hand(Display &display) {
  draw(hand_program, display);
}


